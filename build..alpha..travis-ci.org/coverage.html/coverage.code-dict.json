{"/home/travis/build/npmtest/node-npmtest-blynk-library/test.js":"/* istanbul instrument in package npmtest_blynk_library */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-blynk-library/lib.npmtest_blynk_library.js":"/* istanbul instrument in package npmtest_blynk_library */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_blynk_library = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_blynk_library = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-blynk-library/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-blynk-library && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_blynk_library */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_blynk_library\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_blynk_library.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_blynk_library.rollup.js'] =\n            local.assetsDict['/assets.npmtest_blynk_library.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_blynk_library.__dirname + '/lib.npmtest_blynk_library.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-blynk-library/node_modules/blynk-library/blynk.js":"/* Copyright (c) 2015 Volodymyr Shymanskyy. See the file LICENSE for copying permission. */\n\n'use strict';\n\nvar C = {\n};\n\n/*\n * Helpers\n */\nfunction string_of_enum(e,value) \n{\n  for (var k in e) if (e[k] == value) return k;\n  return \"Unknown(\" + value + \")\";\n}\n\nfunction isEspruino() {\n  if (typeof process === 'undefined') return false;\n  if (typeof process.env.BOARD === 'undefined') return false;\n  return true;\n}\n\nfunction isNode() {\n  return !isEspruino() && (typeof module !== 'undefined' && ('exports' in module));\n}\n\nfunction isBrowser() {\n  return (typeof window !== 'undefined');\n}\n\nfunction needsEmitter() {\n  return isNode();\n}\n\n\nfunction blynkHeader(msg_type, msg_id, msg_len) {\n  return String.fromCharCode(\n    msg_type,\n    msg_id  >> 8, msg_id  & 0xFF,\n    msg_len >> 8, msg_len & 0xFF\n  );\n}\n\nvar MsgType = {\n  RSP           :  0,\n  REGISTER      :  1, //\"mail pass\"\n  LOGIN         :  2, //\"token\" or \"mail pass\"\n  SAVE_PROF     :  3,\n  LOAD_PROF     :  4,\n  GET_TOKEN     :  5,\n  PING          :  6,\n  ACTIVATE      :  7, //\"DASH_ID\"\n  DEACTIVATE    :  8, //\n  REFRESH       :  9, //\"refreshToken DASH_ID\"\n  TWEET         :  12,\n  EMAIL         :  13,\n  NOTIFY        :  14,\n  BRIDGE        :  15,\n  HW_SYNC       :  16,\n  INTERNAL      :  17,\n  SMS           :  18,\n  PROPERTY      :  19,\n  HW            :  20,\n\n  REDIRECT      :  41,\n  DEBUG_PRINT   :  55\n};\n\nvar MsgStatus = {\n  OK                    :  200,\n  ILLEGAL_COMMAND       :  2,\n  ALREADY_REGISTERED    :  4,\n  INVALID_TOKEN         :  9\n};\n\nvar BlynkState = {\n  CONNECTING    :  1,\n  CONNECTED     :  2,\n  DISCONNECTED  :  3\n};\n\nif (isBrowser()) {\n  var bl_browser = require('./blynk-browser.js');\n  var events = require('events');\n  var util = require('util');\n} else if (isNode()) {\n  var bl_node = require('./blynk-node.js');\n  var events = require('events');\n  var util = require('util');\n}\n\n/*\n * Serial\n */\nif (isEspruino()) {\n\n  var EspruinoSerial = function(options) {\n    var self = this;\n\n    var options = options || {};\n    self.ser  = options.serial || USB;\n    self.conser = options.conser || Serial1;\n    self.baud = options.baud || 9600;\n\n    this.write = function(data) {\n      self.ser.write(data);\n    };\n\n    this.connect = function(done) {\n      self.ser.setup(self.baud);\n      self.ser.removeAllListeners('data');\n      self.ser.on('data', function(data) {\n        self.emit('data', data);\n      });\n      if (self.conser) {\n        self.conser.setConsole();\n      }\n      done();\n    };\n\n    this.disconnect = function() {\n      //self.ser.setConsole();\n    };\n  };\n\n  var EspruinoTCP = function(options) {\n    var self = this;\n\n    var options = options || {};\n    self.addr = options.addr || \"blynk-cloud.com\";\n    self.port = options.port || 8442;\n\n    var net = require('net');\n\n    this.write = function(data) {\n      if (self.sock) {\n        self.sock.write(data, 'binary');\n      }\n    };\n\n    this.connect = function(done) {\n      if (self.sock) {\n        self.disconnect();\n      }\n      console.log(\"Connecting to TCP:\", self.addr, self.port);\n      self.sock = net.connect({host : self.addr, port: self.port}, function() {\n        console.log('Connected');\n        self.sock.on('data', function(data) {\n          self.emit('data', data);\n        });\n        self.sock.on('end', function() {\n          self.emit('end', '');\n        });\n        done();\n      });\n    };\n\n    this.disconnect = function() {\n      if (self.sock) {\n        self.sock = null;\n      }\n    };\n  };\n\n  var BoardEspruinoPico = function(values) {\n    var self = this;\n    this.init = function(blynk) {\n      self.blynk = blynk;\n    };\n    this.process = function(values) {\n      switch(values[0]) {\n        case 'pm':\n          // TODO\n          break;\n        case 'dw':\n          var pin = Pin(values[1]);\n          var val = parseInt(values[2]);\n          pinMode(pin, 'output');\n          digitalWrite(pin, val);\n          break;\n        case 'dr':\n          var pin = Pin(values[1]);\n          self.blynk.sendMsg(MsgType.HW, ['dw', values[1], digitalRead(pin)]);\n          break;\n        case 'aw':\n          var pin = Pin(values[1]);\n          var val = parseFloat(values[2]);\n          pinMode(pin, 'output');\n          analogWrite(pin, val / 255);\n          break;\n        case 'ar':\n          var pin = Pin(values[1]);\n          self.blynk.sendMsg(MsgType.HW, ['aw', values[1], 4095 * analogRead(pin)]);\n          break;\n        default:\n          return null;\n      }\n      return true;\n    };\n  };\n\n  var BoardEspruinoLinux = function(values) {\n    var self = this;\n    this.init = function(blynk) {\n      self.blynk = blynk;\n    };\n    this.process = function(values) {\n      switch(values[0]) {\n        case 'pm':\n          // TODO\n          break;\n        case 'dw':\n          var pin = Pin('D' + values[1]);\n          var val = parseInt(values[2]);\n          pinMode(pin, 'output');\n          digitalWrite(pin, val);\n          break;\n        case 'dr':\n          var pin = Pin('D' + values[1]);\n          self.blynk.sendMsg(MsgType.HW, ['dw', values[1], digitalRead(pin)]);\n          break;\n        case 'aw':\n        case 'ar':\n          break;\n        default:\n          return null;\n      }\n      return true;\n    };\n  };\n}\n\n/*\n * Boards\n */\n\nvar BoardDummy = function() {\n  this.init = function(blynk) {};\n  this.process = function(values) {\n    switch (values[0]) {\n    case 'pm':\n      return true;\n    case 'dw':\n    case 'dr':\n    case 'aw':\n    case 'ar':\n      console.log(\"No direct pin operations available.\");\n      console.log(\"Maybe you need to install mraa or onoff modules?\");\n      return true;\n    }\n  };\n};\n\n/*\n * Blynk\n */\n\nvar Blynk = function(auth, options) {\n  var self = this;\n  if (needsEmitter()) {\n    events.EventEmitter.call(this);\n  }\n\n  this.auth = auth;\n  var options = options || {};\n  this.heartbeat = options.heartbeat || (10*1000);\n\n  // Auto-detect board\n  if (options.board) {\n    this.board = options.board;\n  } else if (isEspruino()) {\n    this.board = new BoardEspruinoPico();\n  } else if (isBrowser()) {\n    this.board = new BoardDummy();\n  } else {\n    [\n        bl_node.BoardMRAA,\n        bl_node.BoardOnOff,\n        BoardDummy\n    ].some(function(b){\n      try {\n        self.board = new b();\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    });\n  }\n  self.board.init(self);\n\n  // Auto-detect connector\n  if (options.connector) {\n    this.conn = options.connector;\n  } else if (isEspruino()) {\n    this.conn = new EspruinoTCP(options);\n  } else if (isBrowser()) {\n    this.conn = new bl_browser.WsClient(options);\n  } else {\n    this.conn = new bl_node.SslClient(options);\n  }\n\n  this.buff_in = '';\n  this.msg_id = 1;\n  this.vpins = [];\n  this.profile = options.profile;\n\n  this.VirtualPin = function(vPin) {\n    if (needsEmitter()) {\n      events.EventEmitter.call(this);\n    }\n    this.pin = vPin;\n    self.vpins[vPin] = this;\n\n    this.write = function(value) {\n      self.virtualWrite(this.pin, value);\n    };\n  };\n\n  this.WidgetBridge = function(vPin) {\n    this.pin = vPin;\n\n    this.setAuthToken = function(token) {\n      self.sendMsg(MsgType.BRIDGE, [this.pin, 'i', token]);\n    };\n    this.digitalWrite = function(pin, val) {\n      self.sendMsg(MsgType.BRIDGE, [this.pin, 'dw', pin, val]);\n    };\n    this.analogWrite = function(pin, val) {\n      self.sendMsg(MsgType.BRIDGE, [this.pin, 'aw', pin, val]);\n    };\n    this.virtualWrite = function(pin, val) {\n      self.sendMsg(MsgType.BRIDGE, [this.pin, 'vw', pin].concat(val));\n    };\n  };\n\n  this.WidgetTerminal = function(vPin) {\n    if (needsEmitter()) {\n      events.EventEmitter.call(this);\n    }\n    this.pin = vPin;\n    self.vpins[vPin] = this;\n\n    this.write = function(data) {\n      self.virtualWrite(this.pin, data);\n    };\n  };\n\n  this.WidgetLCD = function(vPin) {\n    this.pin = vPin;\n\n    this.clear = function() {\n      self.virtualWrite(this.pin, 'clr');\n    };\n    this.print = function(x, y, val) {\n      self.sendMsg(MsgType.HW, ['vw', this.pin, 'p', x, y, val]);\n    };\n  };\n\n  this.WidgetLED = function(vPin) {\n    this.pin = vPin;\n\n    this.setValue = function(val) {\n      self.virtualWrite(this.pin, val);\n    };\n    this.turnOn = function() {\n      self.virtualWrite(this.pin, 255);\n    };\n    this.turnOff = function() {\n      self.virtualWrite(this.pin, 0);\n    };\n  };\n\n  if (needsEmitter()) {\n    util.inherits(this.VirtualPin, events.EventEmitter);\n    util.inherits(this.WidgetBridge, events.EventEmitter);\n    util.inherits(this.WidgetTerminal, events.EventEmitter);\n  }\n\n  if (!options.skip_connect) {\n    this.connect();\n  }\n};\n\nif (needsEmitter()) {\n  util.inherits(Blynk, events.EventEmitter);\n}\n\nBlynk.prototype.onReceive = function(data) {\n  var self = this;\n  self.buff_in += data;\n  while (self.buff_in.length >= 5) {\n    var msg_type = self.buff_in.charCodeAt(0);\n    var msg_id   = self.buff_in.charCodeAt(1) << 8 | self.buff_in.charCodeAt(2);\n    var msg_len  = self.buff_in.charCodeAt(3) << 8 | self.buff_in.charCodeAt(4);\n\n    if (msg_id === 0)  { return self.disconnect(); }\n\n    if (msg_type === MsgType.RSP) {\n      //console.log('> ', string_of_enum(MsgType, msg_type), msg_id, string_of_enum(MsgStatus, msg_len));\n      if (!self.profile) {\n        if (self.timerConn && msg_id === 1) {\n          if (msg_len === MsgStatus.OK || msg_len === MsgStatus.ALREADY_REGISTERED) {\n            clearInterval(self.timerConn);\n            self.timerConn = null;\n            self.timerHb = setInterval(function() {\n              //console.log('Heartbeat');\n              self.sendMsg(MsgType.PING);\n            }, self.heartbeat);\n            console.log('Authorized');\n            self.sendMsg(MsgType.INTERNAL, ['ver', '0.4.7', 'dev', 'js']);\n            self.emit('connect');\n          } else {\n            console.log('Could not login:', string_of_enum(MsgStatus, msg_len));\n            //if invalid token, no point in trying to reconnect\n            if (msg_len === MsgStatus.INVALID_TOKEN) {\n              //letting main app know why we failed\n              self.emit('error', string_of_enum(MsgStatus, msg_len));\n              //console.log('Disconnecting because of invalid token');\n              self.disconnect();\n              if(self.timerConn) {\n                //clear connecting timer\n                console.log('clear conn timer');\n                clearInterval(self.timerConn);\n                self.timerConn = null;\n              }\n            }\n          }\n        }\n      }\n      self.buff_in = self.buff_in.substr(5);\n      continue;\n    }\n\n    if (msg_len > 1024)  { return self.disconnect(); }\n    if (self.buff_in.length < msg_len+5) {\n      return;\n    }\n    var values = self.buff_in.substr(5, msg_len).split('\\0');\n    self.buff_in = self.buff_in.substr(msg_len+5);\n\n    /*if (msg_len) {\n      console.log('> ', string_of_enum(MsgType, msg_type), msg_id, msg_len, values.join('|'));\n    } else {\n      console.log('> ', string_of_enum(MsgType, msg_type), msg_id, msg_len);\n    }*/\n\n    if (msg_type === MsgType.LOGIN ||\n        msg_type === MsgType.PING)\n    {\n      self.sendRsp(MsgType.RSP, msg_id, MsgStatus.OK);\n    } else if (msg_type === MsgType.GET_TOKEN) {\n      self.sendRsp(MsgType.GET_TOKEN, msg_id, self.auth.length, self.auth);\n    } else if (msg_type === MsgType.LOAD_PROF) {\n      self.sendRsp(MsgType.LOAD_PROF, msg_id, self.profile.length, self.profile);\n    } else if (msg_type === MsgType.HW ||\n               msg_type === MsgType.BRIDGE)\n    {\n      if (values[0] === 'vw') {\n        var pin = parseInt(values[1]);\n        if (self.vpins[pin]) {\n          self.vpins[pin].emit('write', values.slice(2));\n        }\n      } else if (values[0] === 'vr') {\n        var pin = parseInt(values[1]);\n        if (self.vpins[pin]) {\n          self.vpins[pin].emit('read');\n        }\n      } else if (self.board.process(values)) {\n\n      } else {\n        console.log('Invalid cmd: ', values[0]);\n        //self.sendRsp(MsgType.RSP, msg_id, MsgStatus.ILLEGAL_COMMAND);\n      }\n    } else if (msg_type === MsgType.REDIRECT) {\n      self.conn.addr = values[0];\n      if (values[1]) {\n        self.conn.port = parseInt(values[1]);\n      }\n      console.log('Redirecting to ', self.conn.addr, ':', self.conn.port);\n      self.disconnect();\n    } else if (msg_type === MsgType.DEBUG_PRINT) {\n      console.log('Server: ', values[0]);\n    } else if (msg_type === MsgType.REGISTER ||\n               msg_type === MsgType.SAVE_PROF ||\n               msg_type === MsgType.INTERNAL ||\n               msg_type === MsgType.ACTIVATE ||\n               msg_type === MsgType.DEACTIVATE ||\n               msg_type === MsgType.REFRESH)\n    {\n      // these make no sence...\n    } else {\n      console.log('Invalid msg type: ', msg_type);\n      self.sendRsp(MsgType.RSP, msg_id, MsgStatus.ILLEGAL_COMMAND);\n    }\n  } // end while\n};\n\nBlynk.prototype.sendRsp = function(msg_type, msg_id, msg_len, data) {\n  var self = this;\n  data = data || \"\";\n  msg_id = msg_id || (self.msg_id++);\n  if (msg_type == MsgType.RSP) {\n    //console.log('< ', string_of_enum(MsgType, msg_type), msg_id, string_of_enum(MsgStatus, msg_len));\n    data = blynkHeader(msg_type, msg_id, msg_len)\n  } else {\n    /*if (msg_len) {\n      console.log('< ', string_of_enum(MsgType, msg_type), msg_id, msg_len, data.split('\\0').join('|'));\n    } else {\n      console.log('< ', string_of_enum(MsgType, msg_type), msg_id, msg_len);\n    }*/\n    data = blynkHeader(msg_type, msg_id, msg_len) + data;\n  }\n\n  self.conn.write(data)\n\n  // TODO: track also recieving time\n  /*if (!self.profile) {\n    if (self.timerHb) {\n      clearInterval(self.timerHb);\n      self.timerHb = setInterval(function(){\n        //console.log('Heartbeat');\n        self.sendMsg(MsgType.PING);\n      }, self.heartbeat);\n    }\n  }*/\n};\n\nBlynk.prototype.sendMsg = function(msg_type, values, msg_id) {\n  var values = values || [''];\n  var data = values.join('\\0');\n  this.sendRsp(msg_type, msg_id, data.length, data);\n};\n\n/*\n  * API\n  */\n\nBlynk.prototype.connect = function() {\n  var self = this;\n\n  var doConnect = function() {\n    if(self.conn) {\n      //cleanup events\n      self.conn.removeAllListeners();\n    }\n    self.conn.connect(function() {\n      self.conn.on('data', function(data) { self.onReceive(data);     });\n      self.conn.on('end',  function()     { self.end();               });\n\n      self.sendRsp(MsgType.LOGIN, 1, self.auth.length, self.auth);\n    });\n    self.conn.on('error', function(err) { self.error(err);            });\n  };\n\n  if (self.profile) {\n    doConnect();\n  } else {\n    self.timerConn = setInterval(doConnect, 10000);\n    doConnect();\n  }\n};\n\nBlynk.prototype.disconnect = function(reconnect) {\n  console.log('Disconnect blynk');\n  if(typeof reconnect === 'undefined' ) {\n    reconnect = true;\n  }\n\n  var self = this;\n  this.conn.disconnect();\n  if (this.timerHb) {\n    clearInterval(this.timerHb);\n    this.timerHb = null;\n  }\n  this.emit('disconnect');\n  //cleanup to avoid multiplying listeners\n  this.conn.removeAllListeners();\n\n  //starting reconnect procedure if not already in connecting loop and reconnect is true\n  if(reconnect && !self.timerConn) {\n    console.log(\"REARMING DISCONNECT\");\n    setTimeout(function () {self.connect()}, 5000);\n  }\n};\n\nBlynk.prototype.error = function(err) {\n  var self = this;\n  //if we throw error and user doesn't handle it, app crashes. is it worth it?\n  this.emit('error', err.code?err.code:'ERROR');\n  console.error('Error', err.code);\n  //starting reconnect procedure if not already in connecting loop\n  if(!self.timerConn) {\n    setTimeout(function () {self.connect()}, 5000);\n  }\n};\n\nBlynk.prototype.end = function() {\n  var self = this;\n  self.disconnect();\n};\n\n\nBlynk.prototype.virtualWrite = function(pin, val) {\n  this.sendMsg(MsgType.HW, ['vw', pin].concat(val));\n};\n\nBlynk.prototype.setProperty = function(pin, prop, val) {\n  this.sendMsg(MsgType.PROPERTY, [pin, prop].concat(val));\n};\n\n\nBlynk.prototype.syncAll = function() {\n  this.sendMsg(MsgType.HW_SYNC);\n};\n\nBlynk.prototype.syncVirtual = function(pin) {\n  this.sendMsg(MsgType.HW_SYNC, ['vr', pin]);\n};\n\n\nBlynk.prototype.email = function(to, topic, message) {\n  this.sendMsg(MsgType.EMAIL, [to, topic, message]);\n};\n\nBlynk.prototype.notify = function(message) {\n  this.sendMsg(MsgType.NOTIFY, [message]);\n};\n\nBlynk.prototype.tweet = function(message) {\n  this.sendMsg(MsgType.TWEET, [message]);\n};\n\nBlynk.prototype.sms = function(message) {\n  this.sendMsg(MsgType.SMS, [message]);\n};\n\nif (typeof module !== 'undefined' && ('exports' in module)) {\n  exports.Blynk = Blynk;\n\n  if (isEspruino()) {\n    exports.EspruinoSerial = EspruinoSerial;\n    exports.EspruinoTCP = EspruinoTCP;\n    exports.BoardLinux = BoardEspruinoLinux;\n    exports.BoardPico  = BoardEspruinoPico;\n  } else if (isBrowser()) {\n    exports.WsClient = bl_browser.WsClient;\n  } else if (isNode()) {\n    exports.TcpClient = bl_node.TcpClient;\n    exports.TcpServer = bl_node.TcpServer;\n    exports.SslClient = bl_node.SslClient;\n    exports.SslServer = bl_node.SslServer;\n    exports.BoardOnOff = bl_node.BoardOnOff;\n    exports.BoardMRAA = bl_node.BoardMRAA;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-blynk-library/node_modules/blynk-library/blynk-node.js":"/* Copyright (c) 2015 Volodymyr Shymanskyy. See the file LICENSE for copying permission. */\n\n'use strict';\n\nvar events = require('events');\nvar util = require('util');\nvar path = require('path');\n\nvar default_certs_path = path.join(__dirname, \"certs\");\n\n/*\n* TCP Client\n*/\n\nvar MsgType = {\n  HW            :  20\n};\n\nexports.TcpClient = function(options) {\n  var self = this;\n  events.EventEmitter.call(this);\n\n  var options = options || {};\n  self.addr = options.addr || \"blynk-cloud.com\";\n  self.port = options.port || 8442;\n\n  var net = require('net');\n\n  this.write = function(data) {\n    if (self.sock) {\n      self.sock.write(data, 'binary');\n    }\n  };\n\n  this.connect = function(done) {\n    if (self.sock) {\n      self.disconnect();\n    }\n    console.log(\"Connecting to TCP:\", self.addr, self.port);\n    self.sock = new net.Socket();\n    self.sock.setNoDelay(true);\n    self.sock.setEncoding('binary');\n    self.sock.connect({\n      host: self.addr,\n      family: 4,\n      port: self.port\n    }, function() {\n      console.log('Connected');\n      self.sock.on('data', function(data) {\n        self.emit('data', data);\n      });\n      self.sock.on('end', function(data) {\n        self.emit('end', data);\n      });\n      done();\n    });\n    self.sock.on('error', function(err) {\n    \t//console.log('error', err.code);\n        self.emit('error', err);\n    });\n\n  };\n\n  this.disconnect = function() {\n    if (self.sock) {\n      self.sock.destroy();\n      self.sock.removeAllListeners();\n      self.sock = null;\n    }\n  };\n};\n\nutil.inherits(exports.TcpClient, events.EventEmitter);\n\nexports.TcpServer = function(options) {\n  var self = this;\n  events.EventEmitter.call(this);\n\n  var options = options || {};\n  self.addr = options.addr || '0.0.0.0';\n  self.port = options.port || 8442;\n\n  var net = require('net');\n\n  this.write = function(data) {\n    if (self.sock) {\n      self.sock.write(data, 'binary');\n    }\n  };\n\n  this.connect = function(done) {\n    if (self.sock) {\n      self.disconnect();\n    }\n    \n    self.srvr = net.createServer(function(conn) {\n      self.sock = conn;\n      console.log('Connected');\n      self.sock.setNoDelay(true);\n      self.sock.setEncoding('binary');\n      self.sock.on('data', function(data) {\n        self.emit('data', data);\n      });\n      self.sock.on('end', function() {\n        self.emit('end');\n      });\n      done();\n    });\n\n    console.log(\"TCP server:\", self.addr, self.port);\n    self.srvr.listen(self.port, self.addr);\n  };\n\n  this.disconnect = function() {\n    if (self.sock) {\n      self.sock.destroy();\n      self.sock = null;\n    }\n  };\n};\n\nutil.inherits(exports.TcpServer, events.EventEmitter);\n\n/*\n* SSL Client\n*/\n\nexports.SslClient = function(options) {\n  var self = this;\n  events.EventEmitter.call(this);\n  \n  var options = options || {};\n  var certs_path = options.certs_path || default_certs_path;\n  self.addr = options.addr || \"blynk-cloud.com\";\n  self.port = options.port || 8441;\n  // These are necessary only if using the client certificate authentication\n  self.key  = options.key  || null;\n  self.cert = options.cert || null;\n  self.pass = options.pass || null;\n  // This is necessary only if the server uses the self-signed certificate\n  self.ca   = options.ca   || [ path.join(certs_path, 'server.crt') ];\n  self.servername = options.servername || self.addr;\n\n  var net = require('net');\n  var tls = require('tls');\n  var fs = require('fs');\n\n  this.write = function(data) {\n    if (self.sock) {\n      self.sock.write(data, 'binary');\n    }\n  };\n\n  this.connect = function(done) {\n    if (self.sock) {\n      self.disconnect();\n    }\n\n    var opts = {\n      host: self.addr,\n      port: self.port,\n      servername: self.servername,\n      rejectUnauthorized: false,\n      family: 4\n    };\n    if (self.key) { \n      if (Buffer.isBuffer(self.key)) {\n        opts.key = self.key;\n      } else {\n        opts.key = fs.readFileSync(self.key); \n      }\n    }\n    if (self.cert) { \n      if (Buffer.isBuffer(self.cert)) {\n        opts.cert = self.cert;\n      } else {\n        opts.cert = fs.readFileSync(self.cert); \n      }\n    }\n    if (self.pass) { opts.passphrase = self.pass; }\n    if (self.ca)   {\n      if (Buffer.isBuffer(options.ca)) {\n        opts.ca = options.ca;\n      } else {\n        opts.ca = self.ca.map(function(item){\n          return fs.readFileSync(item);\n        });\n      }\n    }\n\n    console.log(\"Connecting to:\", self.addr, self.port);\n    var sock = new net.Socket();\n    sock.on('error', function(e) {\n      console.log(e)\n    });\n    sock.connect({\n      host: self.addr,\n      family: 4,\n      port: self.port\n    }, function() {\n      console.log(\"SSL authorization...\");\n      opts.socket = sock;\n      self.sock = tls.connect(opts, function() {\n        if (!self.sock.authorized) {\n          console.log('SSL not authorized');\n          return;\n        }\n        console.log('Connected');\n        self.sock.setNoDelay(true);\n        self.sock.setEncoding('binary');\n        self.sock.on('data', function(data) {\n          self.emit('data', data);\n        });\n        self.sock.on('end', function(data) {\n          self.emit('end', data);\n        });\n        \n        done();\n      });\n\n      self.sock.on('error', function(err) {\n          //console.log('error', err.code);\n          self.emit('error', err);\n      });\n    });\n  };\n\n  this.disconnect = function() {\n    if (self.sock) {\n      self.sock.destroy();\n      self.sock.removeAllListeners();\n      self.sock = null;\n      \n    }\n  };\n};\n\nutil.inherits(exports.SslClient, events.EventEmitter);\n\nexports.SslServer = function(options) {\n  var self = this;\n  events.EventEmitter.call(this);\n\n  var options = options || {};\n  var certs_path = options.certs_path || default_certs_path;\n  self.addr = options.addr || \"0.0.0.0\";\n  self.port = options.port || 8443;\n  self.key  = options.key  || path.join(certs_path, 'server.pem');\n  self.cert = options.cert || path.join(certs_path, 'server.crt');\n  self.pass = options.pass || null;\n  // This is necessary only if the server uses the self-signed certificate\n  self.ca   = options.ca   || [ path.join(certs_path, 'client.crt') ];\n\n  var tls = require('tls');\n  var fs = require('fs');\n\n  this.write = function(data) {\n    if (self.sock) {\n      self.sock.write(data, 'binary');\n    }\n  };\n\n  this.connect = function(done) {\n    if (self.sock) {\n      self.disconnect();\n    }\n    \n    var opts = { };\n    if (self.key)  { opts.key  = fs.readFileSync(self.key); }\n    if (self.cert) { opts.cert = fs.readFileSync(self.cert); }\n    if (self.pass) { opts.passphrase = self.pass; }\n    if (self.ca)   { opts.ca   = self.ca.map(fs.readFileSync); }\n    if (self.ca)   { opts.requestCert = true; }\n    \n    self.srvr = tls.createServer(opts, function(conn) {\n      self.sock = conn;\n      console.log(self.sock.authorized ? 'Authorized' : 'Unauthorized');\n      self.sock.setNoDelay(true);\n      self.sock.setEncoding('binary');\n      self.sock.on('data', function(data) {\n        self.emit('data', data);\n      });\n      self.sock.on('end', function() {\n        self.emit('end');\n      });\n      done();\n    });\n\n    console.log(\"SSL server:\", self.addr, self.port);\n    self.srvr.listen(self.port, self.addr);\n  };\n\n  this.disconnect = function() {\n    if (self.sock) {\n      self.sock.destroy();\n      self.sock = null;\n    }\n  };\n};\n\nutil.inherits(exports.SslServer, events.EventEmitter);\n\nvar scale = function(value, inMin, inMax, outMin, outMax) {\n  return (value - inMin) * (outMax - outMin) /\n         (inMax - inMin) + outMin;\n}\n\nexports.BoardMRAA = function() {\n  var self = this;\n  var mraa = require('mraa');\n  console.log('MRAA Version: ' + mraa.getVersion());\n  this.init = function(blynk) {\n    self.blynk = blynk;\n  };\n  this.process = function(values) {\n    switch(values[0]) {\n      case 'pm':\n        break;\n      case 'dw': {\n        var pin = new mraa.Gpio(parseInt(values[1]));\n        pin.dir(mraa.DIR_OUT);\n        pin.write(parseInt(values[2]));\n      } break;\n      case 'aw': {\n        var pwm = new mraa.Pwm(parseInt(values[1]));\n        pwm.enable(true);\n        pwm.period_us(700);\n        pwm.write(scale(parseFloat(values[2]), 0, 255, 0, 1));\n      } break;\n      case 'dr': {\n        var pin = new mraa.Gpio(parseInt(values[1]));\n        pin.dir(mraa.DIR_IN);\n        self.blynk.sendMsg(MsgType.HW, null, ['dw', values[1], pin.read()]);\n      } break;\n      case 'ar': {\n        var pin = new mraa.Aio(parseInt(values[1])-14); // TODO\n        self.blynk.sendMsg(MsgType.HW, null, ['aw', values[1], pin.read()]);\n      } break;\n      default:\n        return false;\n    }\n    return true;\n  };\n};\n\nexports.BoardOnOff = function() {\n  var self = this;\n  var Gpio;\n  try {\n    Gpio = require('onoff').Gpio;\n    console.log(\"OnOff mode\");\n  } catch (e) {\n    // Workaround for Omega\n    Gpio = require('/usr/bin/onoff-node/onoff').Gpio;\n    console.log(\"OnOff-Omega mode\");\n  }\n\n  this.init = function(blynk) {\n    self.blynk = blynk;\n  };\n  this.process = function(values) {\n    switch(values[0]) {\n      case 'pm':\n        break;\n      case 'dw':\n        var pin = new Gpio(parseInt(values[1]), 'out');\n        pin.write(parseInt(values[2]));\n        break;\n      case 'dr':\n        var pin = new Gpio(values[1], 'in');\n        pin.read(function(err, value) {\n          if (!err) {\n            self.blynk.sendMsg(MsgType.HW, null, ['dw', values[1], value]);\n          }\n        });\n        break;\n      case 'ar':\n      case 'aw':\n        break;\n      default:\n        return false;\n    }\n    return true;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-blynk-library/node_modules/blynk-library/blynk-browser.js":"/* Copyright (c) 2015 Volodymyr Shymanskyy. See the file LICENSE for copying permission. */\n\nvar events = require('events');\nvar util = require('util');\n\nif (!window.WebSocket) {\n  window.WebSocket = window.MozWebSocket;\n}\n\nfunction ab2str(buf) {\n  return String.fromCharCode.apply(null, new Uint8Array(buf));\n}\n\nfunction str2ab(str) {\n  var buf = new ArrayBuffer(str.length); // 2 bytes for each char\n  var bufView = new Uint8Array(buf);\n  for (var i=0, strLen=str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\nexports.WsClient = function(options) {\n  var self = this;\n  events.EventEmitter.call(this);\n\n  var options = options || {};\n  self.addr = options.addr || \"blynk-cloud.com\";\n  self.port = options.port || 8082;\n  self.path = options.path || \"/websockets\";\n\n  this.write = function(data) {\n    if (self.sock) {\n      self.sock.send(str2ab(data));\n    }\n  };\n\n  this.connect = function(done) {\n    if (self.sock) {\n      self.sock.close();\n    }\n    try {\n      self.sock = new WebSocket('ws://' + self.addr + ':' + self.port + options.path);\n      self.sock.binaryType = 'arraybuffer';\n      self.sock.onopen = function(evt) { done() };\n      self.sock.onclose = function(evt) { self.emit('end'); };\n      self.sock.onmessage = function(evt) {\n        var data = ab2str(evt.data);\n        self.emit('data', data);\n      };\n      self.sock.onerror = function(evt) { self.emit('end'); };\n    } catch(exception){\n      console.log(exception);\n    }\n\n  };\n\n  this.disconnect = function() {\n    if (self.sock) {\n      self.sock.close();\n      self.sock = null;\n    }\n  };\n};\n\nutil.inherits(exports.WsClient, events.EventEmitter);\n","/home/travis/build/npmtest/node-npmtest-blynk-library/node_modules/blynk-library/blynk-espruino.js":"/* Copyright (c) 2015 Volodymyr Shymanskyy. See the file LICENSE for copying permission. */\n\nfunction string_of_enum(e,value) \n{\n  for (var k in e) if (e[k] == value) return k;\n  return \"Unknown(\" + value + \")\";\n}\n\nfunction blynkHeader(msg_type, msg_id, msg_len) {\n  return String.fromCharCode(\n    msg_type,\n    msg_id  >> 8, msg_id  & 0xFF,\n    msg_len >> 8, msg_len & 0xFF\n  );\n}\n\nvar MsgType = {\n  RSP           :  0,\n  LOGIN         :  2, //\"token\" or \"mail pass\"\n  PING          :  6,\n  TWEET         :  12,\n  EMAIL         :  13,\n  NOTIFY        :  14,\n  BRIDGE        :  15,\n  HW_SYNC       :  16,\n  INTERNAL      :  17,\n  SMS           :  18,\n  PROPERTY      :  19,\n  HW            :  20,\n\n  REDIRECT      :  41,\n  DEBUG_PRINT   :  55\n};\n\nvar MsgStatus = {\n  OK                    :  200,\n  ILLEGAL_COMMAND       :  2,\n  ALREADY_REGISTERED    :  4,\n  INVALID_TOKEN         :  9\n};\n\nvar BlynkState = {\n  CONNECTING    :  1,\n  CONNECTED     :  2,\n  DISCONNECTED  :  3\n};\n\n  var EspruinoTCP = function(options) {\n    var self = this;\n\n    var options = options || {};\n    self.addr = options.addr || \"blynk-cloud.com\";\n    self.port = options.port || 8442;\n\n    var net = require('net');\n\n    this.write = function(data) {\n      if (self.sock) {\n        self.sock.write(data, 'binary');\n      }\n    };\n\n    this.connect = function(done) {\n      if (self.sock) {\n        self.disconnect();\n      }\n      console.log(\"Connecting to TCP:\", self.addr, self.port);\n      self.sock = net.connect({host : self.addr, port: self.port}, function() {\n        console.log('Connected');\n        self.sock.on('data', function(data) {\n          self.emit('data', data);\n        });\n        self.sock.on('end', function() {\n          self.emit('end', '');\n        });\n        done();\n      });\n    };\n\n    this.disconnect = function() {\n      if (self.sock) {\n        self.sock = null;\n      }\n    };\n  };\n\n  var BoardEspruino = function(values) {\n    var self = this;\n    this.init = function(blynk) {\n      self.blynk = blynk;\n    };\n    this.process = function(values) {\n      switch(values[0]) {\n        case 'pm':\n          // TODO\n          break;\n        case 'dw':\n          var pin = Pin(values[1]);\n          var val = parseInt(values[2]);\n          pinMode(pin, 'output');\n          digitalWrite(pin, val);\n          break;\n        case 'dr':\n          var pin = Pin(values[1]);\n          self.blynk.sendMsg(MsgType.HW, ['dw', values[1], digitalRead(pin)]);\n          break;\n        case 'aw':\n          var pin = Pin(values[1]);\n          var val = parseFloat(values[2]);\n          pinMode(pin, 'output');\n          analogWrite(pin, val / 255);\n          break;\n        case 'ar':\n          var pin = Pin(values[1]);\n          self.blynk.sendMsg(MsgType.HW, ['aw', values[1], 4095 * analogRead(pin)]);\n          break;\n        default:\n          return null;\n      }\n      return true;\n    };\n  };\n\n/*\n * Blynk\n */\n\nvar Blynk = function(auth, options) {\n  var self = this;\n\n  this.auth = auth;\n  var options = options || {};\n  this.heartbeat = options.heartbeat || (10*1000);\n\n  // Auto-detect board\n  if (options.board) {\n    this.board = options.board;\n  } else {\n    this.board = new BoardEspruino();\n  }\n  self.board.init(self);\n\n  // Auto-detect connector\n  if (options.connector) {\n    this.conn = options.connector;\n  } else {\n    this.conn = new EspruinoTCP(options);\n  }\n\n  this.buff_in = '';\n  this.msg_id = 1;\n  this.vpins = [];\n  this.profile = options.profile;\n\n  this.VirtualPin = function(vPin) {\n    this.pin = vPin;\n    self.vpins[vPin] = this;\n\n    this.write = function(value) {\n      self.virtualWrite(this.pin, value);\n    };\n  };\n\n  this.WidgetBridge = function(vPin) {\n    this.pin = vPin;\n\n    this.setAuthToken = function(token) {\n      self.sendMsg(MsgType.BRIDGE, [this.pin, 'i', token]);\n    };\n    this.digitalWrite = function(pin, val) {\n      self.sendMsg(MsgType.BRIDGE, [this.pin, 'dw', pin, val]);\n    };\n    this.analogWrite = function(pin, val) {\n      self.sendMsg(MsgType.BRIDGE, [this.pin, 'aw', pin, val]);\n    };\n    this.virtualWrite = function(pin, val) {\n      self.sendMsg(MsgType.BRIDGE, [this.pin, 'vw', pin].concat(val));\n    };\n  };\n\n  this.WidgetTerminal = function(vPin) {\n    if (needsEmitter()) {\n      events.EventEmitter.call(this);\n    }\n    this.pin = vPin;\n    self.vpins[vPin] = this;\n\n    this.write = function(data) {\n      self.virtualWrite(this.pin, data);\n    };\n  };\n\n  this.WidgetLCD = function(vPin) {\n    this.pin = vPin;\n\n    this.clear = function() {\n      self.virtualWrite(this.pin, 'clr');\n    };\n    this.print = function(x, y, val) {\n      self.sendMsg(MsgType.HW, ['vw', this.pin, 'p', x, y, val]);\n    };\n  };\n\n  this.WidgetLED = function(vPin) {\n    this.pin = vPin;\n\n    this.setValue = function(val) {\n      self.virtualWrite(this.pin, val);\n    };\n    this.turnOn = function() {\n      self.virtualWrite(this.pin, 255);\n    };\n    this.turnOff = function() {\n      self.virtualWrite(this.pin, 0);\n    };\n  };\n\n  if (!options.skip_connect) {\n    this.connect();\n  }\n};\n\n\nBlynk.prototype.onReceive = function(data) {\n  var self = this;\n  self.buff_in += data;\n  while (self.buff_in.length >= 5) {\n    var msg_type = self.buff_in.charCodeAt(0);\n    var msg_id   = self.buff_in.charCodeAt(1) << 8 | self.buff_in.charCodeAt(2);\n    var msg_len  = self.buff_in.charCodeAt(3) << 8 | self.buff_in.charCodeAt(4);\n\n    if (msg_id === 0)  { return self.disconnect(); }\n\n    if (msg_type === MsgType.RSP) {\n      //console.log('> ', string_of_enum(MsgType, msg_type), msg_id, string_of_enum(MsgStatus, msg_len));\n      if (!self.profile) {\n        if (self.timerConn && msg_id === 1) {\n          if (msg_len === MsgStatus.OK || msg_len === MsgStatus.ALREADY_REGISTERED) {\n            clearInterval(self.timerConn);\n            self.timerConn = null;\n            self.timerHb = setInterval(function() {\n              //console.log('Heartbeat');\n              self.sendMsg(MsgType.PING);\n            }, self.heartbeat);\n            console.log('Authorized');\n            self.sendMsg(MsgType.INTERNAL, ['ver', '0.4.7', 'dev', 'espruino']);\n            self.emit('connect');\n          } else {\n            //if invalid token, no point in trying to reconnect\n            if (msg_len === MsgStatus.INVALID_TOKEN) {\n              //letting main app know why we failed\n              self.emit('error', \"error: \" + msg_len);\n              //console.log('Disconnecting because of invalid token');\n              self.disconnect();\n              if(self.timerConn) {\n                //clear connecting timer\n                console.log('clear conn timer');\n                clearInterval(self.timerConn);\n                self.timerConn = null;\n              }\n            }\n          }\n        }\n      }\n      self.buff_in = self.buff_in.substr(5);\n      continue;\n    }\n\n    if (msg_len > 1024)  { return self.disconnect(); }\n    if (self.buff_in.length < msg_len+5) {\n      return;\n    }\n    var values = self.buff_in.substr(5, msg_len).split('\\0');\n    self.buff_in = self.buff_in.substr(msg_len+5);\n\n    /*if (msg_len) {\n      console.log('> ', string_of_enum(MsgType, msg_type), msg_id, msg_len, values.join('|'));\n    } else {\n      console.log('> ', string_of_enum(MsgType, msg_type), msg_id, msg_len);\n    }*/\n\n    if (msg_type === MsgType.LOGIN ||\n        msg_type === MsgType.PING)\n    {\n      self.sendRsp(MsgType.RSP, msg_id, MsgStatus.OK);\n    } else if (msg_type === MsgType.HW ||\n               msg_type === MsgType.BRIDGE)\n    {\n      if (values[0] === 'vw') {\n        var pin = parseInt(values[1]);\n        if (self.vpins[pin]) {\n          self.vpins[pin].emit('write', values.slice(2));\n        }\n      } else if (values[0] === 'vr') {\n        var pin = parseInt(values[1]);\n        if (self.vpins[pin]) {\n          self.vpins[pin].emit('read');\n        }\n      } else if (self.board.process(values)) {\n\n      } else {\n        console.log('Invalid cmd: ', values[0]);\n        //self.sendRsp(MsgType.RSP, msg_id, MsgStatus.ILLEGAL_COMMAND);\n      }\n    } else if (msg_type === MsgType.REDIRECT) {\n      self.conn.addr = values[0];\n      if (values[1]) {\n        self.conn.port = parseInt(values[1]);\n      }\n      console.log('Redirecting to ', self.conn.addr, ':', self.conn.port);\n      self.disconnect();\n    } else if (msg_type === MsgType.DEBUG_PRINT) {\n      console.log('Server: ', values[0]);\n    } else {\n      console.log('Invalid msg type: ', msg_type);\n      self.sendRsp(MsgType.RSP, msg_id, MsgStatus.ILLEGAL_COMMAND);\n    }\n  } // end while\n};\n\nBlynk.prototype.sendRsp = function(msg_type, msg_id, msg_len, data) {\n  var self = this;\n  data = data || \"\";\n  msg_id = msg_id || (self.msg_id++);\n  if (msg_type == MsgType.RSP) {\n    //console.log('< ', string_of_enum(MsgType, msg_type), msg_id, string_of_enum(MsgStatus, msg_len));\n    data = blynkHeader(msg_type, msg_id, msg_len)\n  } else {\n    /*if (msg_len) {\n      console.log('< ', string_of_enum(MsgType, msg_type), msg_id, msg_len, data.split('\\0').join('|'));\n    } else {\n      console.log('< ', string_of_enum(MsgType, msg_type), msg_id, msg_len);\n    }*/\n    data = blynkHeader(msg_type, msg_id, msg_len) + data;\n  }\n\n  self.conn.write(data)\n};\n\nBlynk.prototype.sendMsg = function(msg_type, values, msg_id) {\n  var values = values || [''];\n  var data = values.join('\\0');\n  this.sendRsp(msg_type, msg_id, data.length, data);\n};\n\n/*\n  * API\n  */\n\nBlynk.prototype.connect = function() {\n  var self = this;\n\n  var doConnect = function() {\n    if(self.conn) {\n      //cleanup events\n      self.conn.removeAllListeners();\n    }\n    self.conn.connect(function() {\n      self.conn.on('data', function(data) { self.onReceive(data);     });\n      self.conn.on('end',  function()     { self.end();               });\n\n      self.sendRsp(MsgType.LOGIN, 1, self.auth.length, self.auth);\n    });\n    self.conn.on('error', function(err) { self.error(err);            });\n  };\n\n  if (self.profile) {\n    doConnect();\n  } else {\n    self.timerConn = setInterval(doConnect, 10000);\n    doConnect();\n  }\n};\n\nBlynk.prototype.disconnect = function(reconnect) {\n  console.log('Disconnect blynk');\n  if(typeof reconnect === 'undefined' ) {\n    reconnect = true;\n  }\n\n  var self = this;\n  this.conn.disconnect();\n  if (this.timerHb) {\n    clearInterval(this.timerHb);\n    this.timerHb = null;\n  }\n  this.emit('disconnect');\n  //cleanup to avoid multiplying listeners\n  this.conn.removeAllListeners();\n\n  //starting reconnect procedure if not already in connecting loop and reconnect is true\n  if(reconnect && !self.timerConn) {\n    console.log(\"REARMING DISCONNECT\");\n    setTimeout(function () {self.connect()}, 5000);\n  }\n};\n\nBlynk.prototype.error = function(err) {\n  var self = this;\n  //if we throw error and user doesn't handle it, app crashes. is it worth it?\n  this.emit('error', err.code?err.code:'ERROR');\n  console.error('Error', err.code);\n  //starting reconnect procedure if not already in connecting loop\n  if(!self.timerConn) {\n    setTimeout(function () {self.connect()}, 5000);\n  }\n};\n\nBlynk.prototype.end = function() {\n  var self = this;\n  self.disconnect();\n};\n\n\nBlynk.prototype.virtualWrite = function(pin, val) {\n  this.sendMsg(MsgType.HW, ['vw', pin].concat(val));\n};\n\nBlynk.prototype.setProperty = function(pin, prop, val) {\n  this.sendMsg(MsgType.PROPERTY, [pin, prop].concat(val));\n};\n\n\nBlynk.prototype.syncAll = function() {\n  this.sendMsg(MsgType.HW_SYNC);\n};\n\nBlynk.prototype.syncVirtual = function(pin) {\n  this.sendMsg(MsgType.HW_SYNC, ['vr', pin]);\n};\n\n\nBlynk.prototype.email = function(to, topic, message) {\n  this.sendMsg(MsgType.EMAIL, [to, topic, message]);\n};\n\nBlynk.prototype.notify = function(message) {\n  this.sendMsg(MsgType.NOTIFY, [message]);\n};\n\nBlynk.prototype.tweet = function(message) {\n  this.sendMsg(MsgType.TWEET, [message]);\n};\n\nBlynk.prototype.sms = function(message) {\n  this.sendMsg(MsgType.SMS, [message]);\n};\n\nexports.Blynk = Blynk;\n","/home/travis/build/npmtest/node-npmtest-blynk-library/node_modules/blynk-library/bin/blynk-client.js":"#!/usr/bin/env node\n\nvar Blynk = require(\"../\");\n\nif (!process.argv[2]) {\n  console.log(\"Please specify auth token.\");\n  process.exit(1);\n}\n\nvar blynk = new Blynk.Blynk(process.argv[2]);\n\nblynk.on('connect', function() {\n  console.log(\"Blynk ready.\");\n});\n","/home/travis/build/npmtest/node-npmtest-blynk-library/node_modules/blynk-library/bin/blynk-ctrl.js":"#!/usr/bin/env node\n'use strict';\n\nvar argparse = require('argparse');\nvar util = require('util');\n\nvar parser = new argparse.ArgumentParser({\n  addHelp: true,\n  description: 'This script uses Bridge feature to control another device from the command line.'\n});\n\n\nfunction GetActionOp(op, expand, minargs) {\n  minargs = minargs || 1;\n  var ActionOp = function (options) {\n    options = options || {};\n    argparse.Action.call(this, options);\n  };\n  util.inherits(ActionOp, argparse.Action);\n\n  ActionOp.prototype.call = function (parser, namespace, values) {\n    if (values.length < minargs) {\n      throw new Error('not enough parameters');\n    }\n    \n    var items = [].concat(namespace['ops'] || [])\n    if (expand) {\n      var pin = values[0];\n      for (var i=1; i<values.length; i++) {\n        items.push([op].concat(pin, values[i]));\n      }\n    } else {\n      items.push([op].concat(values));\n    }\n    namespace.set('ops', items);\n  };\n  return ActionOp;\n};\n\nparser.addArgument(['-t', '--token'],  { action:\"store\",      dest:'token', required:true,    help:'Auth token of the controller' });\n\nparser.addArgument([ '-dw', '--digitalWrite' ], { action: GetActionOp('dw', true, 2), nargs:'*', metavar:['PIN', 'VAL'] });\nparser.addArgument([ '-aw',  '--analogWrite' ], { action: GetActionOp('aw', true, 2), nargs:'*', metavar:['PIN', 'VAL'] });\nparser.addArgument([ '-vw', '--virtualWrite' ], { action: GetActionOp('vw', false, 2), nargs:'*', metavar:['PIN', 'VAL'] });\n\nparser.addArgument([ '-dr', '--digitalRead' ],  { action: GetActionOp('dr'), nargs:1, metavar:['PIN'] });\nparser.addArgument([ '-ar',  '--analogRead' ],  { action: GetActionOp('ar'), nargs:1, metavar:['PIN'] });\nparser.addArgument([ '-vr', '--virtualRead' ],  { action: GetActionOp('vr'), nargs:1, metavar:['PIN'] });\n\nparser.addArgument(['--delay'],                 { action: GetActionOp('delay'), nargs:1, type:'float', metavar:'SECs' });\n\nparser.addArgument(['--delayAll'],     { action:\"store\",      dest:'delayAll', type:'float', metavar:'SECs', help:'Delay between all operations' });\n\nparser.addArgument(['-s', '--server'], { action:'store',      dest:'server',                  help:'Server address or domain name' });\nparser.addArgument(['-p', '--port'],   { action:\"store\",      dest:'port',   type:'int',      help:'Server port' });\nparser.addArgument(['--target'],       { action:\"store\",      dest:'target', metavar:\"TOKEN\", help:'Auth token of the target device' });\nparser.addArgument(['--dump'],         { action:\"storeTrue\",  dest:'dump',                    help:'Dump communication' });\n\n\nvar args = parser.parseArgs();\n//console.dir(args);\n\nvar Blynk = require(\"../\");\nvar blynk = new Blynk.Blynk(args['token']);\nvar bridge = new blynk.WidgetBridge(64);\n\nblynk.on('connect', function() {\n  bridge.setAuthToken(args['token']);\n  args.ops.forEach(function(op) {\n    switch(op[0]) {\n    case 'dw': bridge.digitalWrite(op[1], op[2]);  break;\n    case 'aw': bridge.analogWrite (op[1], op[2]);  break;\n    case 'vw': bridge.virtualWrite(op[1], op.slice(2));  break;\n    case 'dr': blynk.syncDigital(op[1]);           break;\n    case 'ar': blynk.syncAnalog (op[1]);           break;\n    case 'vr': blynk.syncVirtual(op[1]);           break;\n    }\n  });\n});\n"}